// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gen_sql

import (
	json "encoding/json"
	fmt "fmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql(in *jlexer.Lexer, out *CreateUniversityParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var TitleSet bool
	var CoordinateSet bool
	var AboutSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Title":
			out.Title = string(in.String())
			TitleSet = true
		case "Coordinate":
			out.Coordinate = int32(in.Int32())
			CoordinateSet = true
		case "About":
			out.About = string(in.String())
			AboutSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !TitleSet {
		in.AddError(fmt.Errorf("key 'Title' is required"))
	}
	if !CoordinateSet {
		in.AddError(fmt.Errorf("key 'Coordinate' is required"))
	}
	if !AboutSet {
		in.AddError(fmt.Errorf("key 'About' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql(out *jwriter.Writer, in CreateUniversityParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Coordinate\":"
		out.RawString(prefix)
		out.Int32(int32(in.Coordinate))
	}
	{
		const prefix string = ",\"About\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateUniversityParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateUniversityParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateUniversityParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateUniversityParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql1(in *jlexer.Lexer, out *CreateUniversityMemberParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var UniversitySet bool
	var NameFirstSet bool
	var NameMiddleSet bool
	var NameLastSet bool
	var EmailSet bool
	var PasswordHashSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "University":
			out.University = int32(in.Int32())
			UniversitySet = true
		case "NameFirst":
			out.NameFirst = string(in.String())
			NameFirstSet = true
		case "NameMiddle":
			out.NameMiddle = string(in.String())
			NameMiddleSet = true
		case "NameLast":
			out.NameLast = string(in.String())
			NameLastSet = true
		case "Email":
			out.Email = string(in.String())
			EmailSet = true
		case "PasswordHash":
			out.PasswordHash = string(in.String())
			PasswordHashSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !UniversitySet {
		in.AddError(fmt.Errorf("key 'University' is required"))
	}
	if !NameFirstSet {
		in.AddError(fmt.Errorf("key 'NameFirst' is required"))
	}
	if !NameMiddleSet {
		in.AddError(fmt.Errorf("key 'NameMiddle' is required"))
	}
	if !NameLastSet {
		in.AddError(fmt.Errorf("key 'NameLast' is required"))
	}
	if !EmailSet {
		in.AddError(fmt.Errorf("key 'Email' is required"))
	}
	if !PasswordHashSet {
		in.AddError(fmt.Errorf("key 'PasswordHash' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql1(out *jwriter.Writer, in CreateUniversityMemberParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"University\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.University))
	}
	{
		const prefix string = ",\"NameFirst\":"
		out.RawString(prefix)
		out.String(string(in.NameFirst))
	}
	{
		const prefix string = ",\"NameMiddle\":"
		out.RawString(prefix)
		out.String(string(in.NameMiddle))
	}
	{
		const prefix string = ",\"NameLast\":"
		out.RawString(prefix)
		out.String(string(in.NameLast))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"PasswordHash\":"
		out.RawString(prefix)
		out.String(string(in.PasswordHash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateUniversityMemberParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateUniversityMemberParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateUniversityMemberParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateUniversityMemberParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql1(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql2(in *jlexer.Lexer, out *CreateUniversityEventParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var TitleSet bool
	var BodySet bool
	var UniversitySet bool
	var OccurrenceTimeSet bool
	var OccurrenceLocationSet bool
	var ContactPhoneSet bool
	var ContactEmailSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Title":
			out.Title = string(in.String())
			TitleSet = true
		case "Body":
			out.Body = string(in.String())
			BodySet = true
		case "University":
			out.University = int32(in.Int32())
			UniversitySet = true
		case "OccurrenceTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OccurrenceTime).UnmarshalJSON(data))
			}
			OccurrenceTimeSet = true
		case "OccurrenceLocation":
			out.OccurrenceLocation = int32(in.Int32())
			OccurrenceLocationSet = true
		case "ContactPhone":
			out.ContactPhone = string(in.String())
			ContactPhoneSet = true
		case "ContactEmail":
			out.ContactEmail = string(in.String())
			ContactEmailSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !TitleSet {
		in.AddError(fmt.Errorf("key 'Title' is required"))
	}
	if !BodySet {
		in.AddError(fmt.Errorf("key 'Body' is required"))
	}
	if !UniversitySet {
		in.AddError(fmt.Errorf("key 'University' is required"))
	}
	if !OccurrenceTimeSet {
		in.AddError(fmt.Errorf("key 'OccurrenceTime' is required"))
	}
	if !OccurrenceLocationSet {
		in.AddError(fmt.Errorf("key 'OccurrenceLocation' is required"))
	}
	if !ContactPhoneSet {
		in.AddError(fmt.Errorf("key 'ContactPhone' is required"))
	}
	if !ContactEmailSet {
		in.AddError(fmt.Errorf("key 'ContactEmail' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql2(out *jwriter.Writer, in CreateUniversityEventParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"University\":"
		out.RawString(prefix)
		out.Int32(int32(in.University))
	}
	{
		const prefix string = ",\"OccurrenceTime\":"
		out.RawString(prefix)
		out.Raw((in.OccurrenceTime).MarshalJSON())
	}
	{
		const prefix string = ",\"OccurrenceLocation\":"
		out.RawString(prefix)
		out.Int32(int32(in.OccurrenceLocation))
	}
	{
		const prefix string = ",\"ContactPhone\":"
		out.RawString(prefix)
		out.String(string(in.ContactPhone))
	}
	{
		const prefix string = ",\"ContactEmail\":"
		out.RawString(prefix)
		out.String(string(in.ContactEmail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateUniversityEventParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateUniversityEventParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateUniversityEventParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateUniversityEventParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql2(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql3(in *jlexer.Lexer, out *CreateTaggedRsoParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var TagSet bool
	var RsoSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Tag":
			out.Tag = int32(in.Int32())
			TagSet = true
		case "Rso":
			out.Rso = int32(in.Int32())
			RsoSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !TagSet {
		in.AddError(fmt.Errorf("key 'Tag' is required"))
	}
	if !RsoSet {
		in.AddError(fmt.Errorf("key 'Rso' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql3(out *jwriter.Writer, in CreateTaggedRsoParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Tag\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Tag))
	}
	{
		const prefix string = ",\"Rso\":"
		out.RawString(prefix)
		out.Int32(int32(in.Rso))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateTaggedRsoParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateTaggedRsoParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateTaggedRsoParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateTaggedRsoParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql3(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql4(in *jlexer.Lexer, out *CreateTaggedEventParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var TagSet bool
	var UniversityEventSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Tag":
			out.Tag = int32(in.Int32())
			TagSet = true
		case "UniversityEvent":
			out.UniversityEvent = int32(in.Int32())
			UniversityEventSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !TagSet {
		in.AddError(fmt.Errorf("key 'Tag' is required"))
	}
	if !UniversityEventSet {
		in.AddError(fmt.Errorf("key 'UniversityEvent' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql4(out *jwriter.Writer, in CreateTaggedEventParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Tag\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Tag))
	}
	{
		const prefix string = ",\"UniversityEvent\":"
		out.RawString(prefix)
		out.Int32(int32(in.UniversityEvent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateTaggedEventParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateTaggedEventParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateTaggedEventParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateTaggedEventParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql4(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql5(in *jlexer.Lexer, out *CreateRsoParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var TitleSet bool
	var UniversitySet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Title":
			out.Title = string(in.String())
			TitleSet = true
		case "University":
			out.University = int32(in.Int32())
			UniversitySet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !TitleSet {
		in.AddError(fmt.Errorf("key 'Title' is required"))
	}
	if !UniversitySet {
		in.AddError(fmt.Errorf("key 'University' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql5(out *jwriter.Writer, in CreateRsoParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"University\":"
		out.RawString(prefix)
		out.Int32(int32(in.University))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRsoParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRsoParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRsoParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRsoParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql5(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql6(in *jlexer.Lexer, out *CreateRsoMemberParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var RsoSet bool
	var UniversityMemberSet bool
	var IsAdminSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rso":
			out.Rso = int32(in.Int32())
			RsoSet = true
		case "UniversityMember":
			out.UniversityMember = int32(in.Int32())
			UniversityMemberSet = true
		case "IsAdmin":
			out.IsAdmin = bool(in.Bool())
			IsAdminSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !RsoSet {
		in.AddError(fmt.Errorf("key 'Rso' is required"))
	}
	if !UniversityMemberSet {
		in.AddError(fmt.Errorf("key 'UniversityMember' is required"))
	}
	if !IsAdminSet {
		in.AddError(fmt.Errorf("key 'IsAdmin' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql6(out *jwriter.Writer, in CreateRsoMemberParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Rso\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Rso))
	}
	{
		const prefix string = ",\"UniversityMember\":"
		out.RawString(prefix)
		out.Int32(int32(in.UniversityMember))
	}
	{
		const prefix string = ",\"IsAdmin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRsoMemberParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRsoMemberParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRsoMemberParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRsoMemberParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql6(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql7(in *jlexer.Lexer, out *CreateRsoEventParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var IDSet bool
	var RsoSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int32(in.Int32())
			IDSet = true
		case "Rso":
			out.Rso = int32(in.Int32())
			RsoSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !IDSet {
		in.AddError(fmt.Errorf("key 'ID' is required"))
	}
	if !RsoSet {
		in.AddError(fmt.Errorf("key 'Rso' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql7(out *jwriter.Writer, in CreateRsoEventParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"Rso\":"
		out.RawString(prefix)
		out.Int32(int32(in.Rso))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRsoEventParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRsoEventParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRsoEventParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRsoEventParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql7(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql8(in *jlexer.Lexer, out *CreateRatingParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var StarsSet bool
	var PostedBySet bool
	var UniversityEventSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Stars":
			out.Stars = int32(in.Int32())
			StarsSet = true
		case "PostedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PostedBy).UnmarshalJSON(data))
			}
			PostedBySet = true
		case "UniversityEvent":
			out.UniversityEvent = int32(in.Int32())
			UniversityEventSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !StarsSet {
		in.AddError(fmt.Errorf("key 'Stars' is required"))
	}
	if !PostedBySet {
		in.AddError(fmt.Errorf("key 'PostedBy' is required"))
	}
	if !UniversityEventSet {
		in.AddError(fmt.Errorf("key 'UniversityEvent' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql8(out *jwriter.Writer, in CreateRatingParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Stars\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Stars))
	}
	{
		const prefix string = ",\"PostedBy\":"
		out.RawString(prefix)
		out.Raw((in.PostedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UniversityEvent\":"
		out.RawString(prefix)
		out.Int32(int32(in.UniversityEvent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRatingParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRatingParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRatingParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRatingParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql8(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql9(in *jlexer.Lexer, out *CreatePublicEventParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var IDSet bool
	var ApprovedSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int32(in.Int32())
			IDSet = true
		case "Approved":
			out.Approved = bool(in.Bool())
			ApprovedSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !IDSet {
		in.AddError(fmt.Errorf("key 'ID' is required"))
	}
	if !ApprovedSet {
		in.AddError(fmt.Errorf("key 'Approved' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql9(out *jwriter.Writer, in CreatePublicEventParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"Approved\":"
		out.RawString(prefix)
		out.Bool(bool(in.Approved))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreatePublicEventParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreatePublicEventParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreatePublicEventParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreatePublicEventParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql9(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql10(in *jlexer.Lexer, out *CreateCoordinateParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var TitleSet bool
	var LatitudeSet bool
	var LongitudeSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Title":
			out.Title = string(in.String())
			TitleSet = true
		case "Latitude":
			out.Latitude = float64(in.Float64())
			LatitudeSet = true
		case "Longitude":
			out.Longitude = float64(in.Float64())
			LongitudeSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !TitleSet {
		in.AddError(fmt.Errorf("key 'Title' is required"))
	}
	if !LatitudeSet {
		in.AddError(fmt.Errorf("key 'Latitude' is required"))
	}
	if !LongitudeSet {
		in.AddError(fmt.Errorf("key 'Longitude' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql10(out *jwriter.Writer, in CreateCoordinateParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCoordinateParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCoordinateParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCoordinateParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCoordinateParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql10(l, v)
}
func easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql11(in *jlexer.Lexer, out *CreateCommentParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var BodySet bool
	var PostedBySet bool
	var UniversityEventSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Body":
			out.Body = string(in.String())
			BodySet = true
		case "PostedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PostedBy).UnmarshalJSON(data))
			}
			PostedBySet = true
		case "UniversityEvent":
			out.UniversityEvent = int32(in.Int32())
			UniversityEventSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !BodySet {
		in.AddError(fmt.Errorf("key 'Body' is required"))
	}
	if !PostedBySet {
		in.AddError(fmt.Errorf("key 'PostedBy' is required"))
	}
	if !UniversityEventSet {
		in.AddError(fmt.Errorf("key 'UniversityEvent' is required"))
	}
}
func easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql11(out *jwriter.Writer, in CreateCommentParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Body\":"
		out.RawString(prefix[1:])
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"PostedBy\":"
		out.RawString(prefix)
		out.Raw((in.PostedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UniversityEvent\":"
		out.RawString(prefix)
		out.Int32(int32(in.UniversityEvent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCommentParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCommentParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3ba41af8EncodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCommentParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCommentParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3ba41af8DecodeGithubComThatpix3lCollgeEventWebsiteSrcGenSql11(l, v)
}
