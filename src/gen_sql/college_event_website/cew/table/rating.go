//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Rating = newRatingTable("cew", "rating", "")

type ratingTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	Stars         postgres.ColumnInteger
	StudentID     postgres.ColumnString
	BaseEventID   postgres.ColumnString
	PostTimestamp postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RatingTable struct {
	ratingTable

	EXCLUDED ratingTable
}

// AS creates new RatingTable with assigned alias
func (a RatingTable) AS(alias string) *RatingTable {
	return newRatingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RatingTable with assigned schema name
func (a RatingTable) FromSchema(schemaName string) *RatingTable {
	return newRatingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RatingTable with assigned table prefix
func (a RatingTable) WithPrefix(prefix string) *RatingTable {
	return newRatingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RatingTable with assigned table suffix
func (a RatingTable) WithSuffix(suffix string) *RatingTable {
	return newRatingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRatingTable(schemaName, tableName, alias string) *RatingTable {
	return &RatingTable{
		ratingTable: newRatingTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newRatingTableImpl("", "excluded", ""),
	}
}

func newRatingTableImpl(schemaName, tableName, alias string) ratingTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		StarsColumn         = postgres.IntegerColumn("stars")
		StudentIDColumn     = postgres.StringColumn("student_id")
		BaseEventIDColumn   = postgres.StringColumn("base_event_id")
		PostTimestampColumn = postgres.TimestampColumn("post_timestamp")
		allColumns          = postgres.ColumnList{IDColumn, StarsColumn, StudentIDColumn, BaseEventIDColumn, PostTimestampColumn}
		mutableColumns      = postgres.ColumnList{StarsColumn, StudentIDColumn, BaseEventIDColumn, PostTimestampColumn}
	)

	return ratingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Stars:         StarsColumn,
		StudentID:     StudentIDColumn,
		BaseEventID:   BaseEventIDColumn,
		PostTimestamp: PostTimestampColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
