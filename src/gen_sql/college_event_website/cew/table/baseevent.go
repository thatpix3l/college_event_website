//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Baseevent = newBaseeventTable("cew", "baseevent", "")

type baseeventTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	Title        postgres.ColumnString
	About        postgres.ColumnString
	UniversityID postgres.ColumnString
	StartTime    postgres.ColumnTimestamp
	ContactPhone postgres.ColumnString
	ContactEmail postgres.ColumnString
	Latitude     postgres.ColumnFloat
	Longitude    postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BaseeventTable struct {
	baseeventTable

	EXCLUDED baseeventTable
}

// AS creates new BaseeventTable with assigned alias
func (a BaseeventTable) AS(alias string) *BaseeventTable {
	return newBaseeventTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BaseeventTable with assigned schema name
func (a BaseeventTable) FromSchema(schemaName string) *BaseeventTable {
	return newBaseeventTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BaseeventTable with assigned table prefix
func (a BaseeventTable) WithPrefix(prefix string) *BaseeventTable {
	return newBaseeventTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BaseeventTable with assigned table suffix
func (a BaseeventTable) WithSuffix(suffix string) *BaseeventTable {
	return newBaseeventTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBaseeventTable(schemaName, tableName, alias string) *BaseeventTable {
	return &BaseeventTable{
		baseeventTable: newBaseeventTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newBaseeventTableImpl("", "excluded", ""),
	}
}

func newBaseeventTableImpl(schemaName, tableName, alias string) baseeventTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		TitleColumn        = postgres.StringColumn("title")
		AboutColumn        = postgres.StringColumn("about")
		UniversityIDColumn = postgres.StringColumn("university_id")
		StartTimeColumn    = postgres.TimestampColumn("start_time")
		ContactPhoneColumn = postgres.StringColumn("contact_phone")
		ContactEmailColumn = postgres.StringColumn("contact_email")
		LatitudeColumn     = postgres.FloatColumn("latitude")
		LongitudeColumn    = postgres.FloatColumn("longitude")
		allColumns         = postgres.ColumnList{IDColumn, TitleColumn, AboutColumn, UniversityIDColumn, StartTimeColumn, ContactPhoneColumn, ContactEmailColumn, LatitudeColumn, LongitudeColumn}
		mutableColumns     = postgres.ColumnList{TitleColumn, AboutColumn, UniversityIDColumn, StartTimeColumn, ContactPhoneColumn, ContactEmailColumn, LatitudeColumn, LongitudeColumn}
	)

	return baseeventTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Title:        TitleColumn,
		About:        AboutColumn,
		UniversityID: UniversityIDColumn,
		StartTime:    StartTimeColumn,
		ContactPhone: ContactPhoneColumn,
		ContactEmail: ContactEmailColumn,
		Latitude:     LatitudeColumn,
		Longitude:    LongitudeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
