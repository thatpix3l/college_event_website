//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Baseuser = newBaseuserTable("cew", "baseuser", "")

type baseuserTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	NameFirst    postgres.ColumnString
	NameLast     postgres.ColumnString
	Email        postgres.ColumnString
	PasswordHash postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BaseuserTable struct {
	baseuserTable

	EXCLUDED baseuserTable
}

// AS creates new BaseuserTable with assigned alias
func (a BaseuserTable) AS(alias string) *BaseuserTable {
	return newBaseuserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BaseuserTable with assigned schema name
func (a BaseuserTable) FromSchema(schemaName string) *BaseuserTable {
	return newBaseuserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BaseuserTable with assigned table prefix
func (a BaseuserTable) WithPrefix(prefix string) *BaseuserTable {
	return newBaseuserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BaseuserTable with assigned table suffix
func (a BaseuserTable) WithSuffix(suffix string) *BaseuserTable {
	return newBaseuserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBaseuserTable(schemaName, tableName, alias string) *BaseuserTable {
	return &BaseuserTable{
		baseuserTable: newBaseuserTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newBaseuserTableImpl("", "excluded", ""),
	}
}

func newBaseuserTableImpl(schemaName, tableName, alias string) baseuserTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		NameFirstColumn    = postgres.StringColumn("name_first")
		NameLastColumn     = postgres.StringColumn("name_last")
		EmailColumn        = postgres.StringColumn("email")
		PasswordHashColumn = postgres.StringColumn("password_hash")
		allColumns         = postgres.ColumnList{IDColumn, NameFirstColumn, NameLastColumn, EmailColumn, PasswordHashColumn}
		mutableColumns     = postgres.ColumnList{NameFirstColumn, NameLastColumn, EmailColumn, PasswordHashColumn}
	)

	return baseuserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		NameFirst:    NameFirstColumn,
		NameLast:     NameLastColumn,
		Email:        EmailColumn,
		PasswordHash: PasswordHashColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
