//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Taggedevent = newTaggedeventTable("cew", "taggedevent", "")

type taggedeventTable struct {
	postgres.Table

	// Columns
	TagID       postgres.ColumnString
	BaseEventID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TaggedeventTable struct {
	taggedeventTable

	EXCLUDED taggedeventTable
}

// AS creates new TaggedeventTable with assigned alias
func (a TaggedeventTable) AS(alias string) *TaggedeventTable {
	return newTaggedeventTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TaggedeventTable with assigned schema name
func (a TaggedeventTable) FromSchema(schemaName string) *TaggedeventTable {
	return newTaggedeventTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TaggedeventTable with assigned table prefix
func (a TaggedeventTable) WithPrefix(prefix string) *TaggedeventTable {
	return newTaggedeventTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TaggedeventTable with assigned table suffix
func (a TaggedeventTable) WithSuffix(suffix string) *TaggedeventTable {
	return newTaggedeventTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTaggedeventTable(schemaName, tableName, alias string) *TaggedeventTable {
	return &TaggedeventTable{
		taggedeventTable: newTaggedeventTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newTaggedeventTableImpl("", "excluded", ""),
	}
}

func newTaggedeventTableImpl(schemaName, tableName, alias string) taggedeventTable {
	var (
		TagIDColumn       = postgres.StringColumn("tag_id")
		BaseEventIDColumn = postgres.StringColumn("base_event_id")
		allColumns        = postgres.ColumnList{TagIDColumn, BaseEventIDColumn}
		mutableColumns    = postgres.ColumnList{}
	)

	return taggedeventTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TagID:       TagIDColumn,
		BaseEventID: BaseEventIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
