// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package gen_sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCoordinate = `-- name: CreateCoordinate :one
INSERT INTO Coordinate (title, latitude, longitude)
VALUES ($1, $2, $3)
RETURNING id, title, latitude, longitude
`

type CreateCoordinateParams struct {
	Title     string
	Latitude  float64
	Longitude float64
}

func (q *Queries) CreateCoordinate(ctx context.Context, arg CreateCoordinateParams) (Coordinate, error) {
	row := q.db.QueryRow(ctx, createCoordinate, arg.Title, arg.Latitude, arg.Longitude)
	var i Coordinate
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const createUniversity = `-- name: CreateUniversity :one
INSERT INTO University (title, coordinate, about)
VALUES ($1, $2, $3)
RETURNING id, title, coordinate, about
`

type CreateUniversityParams struct {
	Title      string
	Coordinate int32
	About      string
}

func (q *Queries) CreateUniversity(ctx context.Context, arg CreateUniversityParams) (University, error) {
	row := q.db.QueryRow(ctx, createUniversity, arg.Title, arg.Coordinate, arg.About)
	var i University
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Coordinate,
		&i.About,
	)
	return i, err
}

const createUniversityMember = `-- name: CreateUniversityMember :one
INSERT INTO UniversityMember
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, university, name_first, name_middle, name_last, email, password_hash
`

type CreateUniversityMemberParams struct {
	Column1 pgtype.Int4
	Column2 pgtype.Int4
	Column3 pgtype.Text
	Column4 pgtype.Text
	Column5 pgtype.Text
	Column6 pgtype.Text
}

func (q *Queries) CreateUniversityMember(ctx context.Context, arg CreateUniversityMemberParams) (Universitymember, error) {
	row := q.db.QueryRow(ctx, createUniversityMember,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
	)
	var i Universitymember
	err := row.Scan(
		&i.ID,
		&i.University,
		&i.NameFirst,
		&i.NameMiddle,
		&i.NameLast,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}
