// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package gen_sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBaseEvent = `-- name: CreateBaseEvent :one
INSERT INTO BaseEvent (
        title,
        body,
        university,
        occurrence_time,
        occurrence_location,
        contact_phone,
        contact_email
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, title, body, university, occurrence_time, occurrence_location, contact_phone, contact_email
`

type CreateBaseEventParams struct {
	Title              string           `json:",required"`
	Body               string           `json:",required"`
	University         int32            `json:",required"`
	OccurrenceTime     pgtype.Timestamp `json:",required"`
	OccurrenceLocation int32            `json:",required"`
	ContactPhone       string           `json:",required"`
	ContactEmail       string           `json:",required"`
}

func (q *Queries) CreateBaseEvent(ctx context.Context, arg CreateBaseEventParams) (Baseevent, error) {
	row := q.db.QueryRow(ctx, createBaseEvent,
		arg.Title,
		arg.Body,
		arg.University,
		arg.OccurrenceTime,
		arg.OccurrenceLocation,
		arg.ContactPhone,
		arg.ContactEmail,
	)
	var i Baseevent
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.University,
		&i.OccurrenceTime,
		&i.OccurrenceLocation,
		&i.ContactPhone,
		&i.ContactEmail,
	)
	return i, err
}

const createBaseUser = `-- name: CreateBaseUser :one
INSERT INTO BaseUser (
        name_first,
        name_middle,
        name_last,
        email,
        password_hash
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
RETURNING id, name_first, name_middle, name_last, email, password_hash
`

type CreateBaseUserParams struct {
	NameFirst    string `json:",required"`
	NameMiddle   string `json:",required"`
	NameLast     string `json:",required"`
	Email        string `json:",required"`
	PasswordHash string `json:",required"`
}

func (q *Queries) CreateBaseUser(ctx context.Context, arg CreateBaseUserParams) (Baseuser, error) {
	row := q.db.QueryRow(ctx, createBaseUser,
		arg.NameFirst,
		arg.NameMiddle,
		arg.NameLast,
		arg.Email,
		arg.PasswordHash,
	)
	var i Baseuser
	err := row.Scan(
		&i.ID,
		&i.NameFirst,
		&i.NameMiddle,
		&i.NameLast,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO Comment (body, posted_by, base_event)
VALUES ($1, $2, $3)
RETURNING id, body, posted_by, base_event
`

type CreateCommentParams struct {
	Body      string      `json:",required"`
	PostedBy  pgtype.Int4 `json:",required"`
	BaseEvent int32       `json:",required"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.Body, arg.PostedBy, arg.BaseEvent)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.PostedBy,
		&i.BaseEvent,
	)
	return i, err
}

const createCoordinate = `-- name: CreateCoordinate :one
INSERT INTO Coordinate (title, latitude, longitude)
VALUES ($1, $2, $3)
RETURNING id, title, latitude, longitude
`

type CreateCoordinateParams struct {
	Title     string  `json:",required"`
	Latitude  float64 `json:",required"`
	Longitude float64 `json:",required"`
}

func (q *Queries) CreateCoordinate(ctx context.Context, arg CreateCoordinateParams) (Coordinate, error) {
	row := q.db.QueryRow(ctx, createCoordinate, arg.Title, arg.Latitude, arg.Longitude)
	var i Coordinate
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const createMember = `-- name: CreateMember :one
INSERT INTO Member (id, university)
VALUES ($1, $2)
RETURNING id, university
`

type CreateMemberParams struct {
	ID         int32 `json:",required"`
	University int32 `json:",required"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, createMember, arg.ID, arg.University)
	var i Member
	err := row.Scan(&i.ID, &i.University)
	return i, err
}

const createPrivateEvent = `-- name: CreatePrivateEvent :one
INSERT INTO PrivateEvent (id)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreatePrivateEvent(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, createPrivateEvent, id)
	err := row.Scan(&id)
	return id, err
}

const createPublicEvent = `-- name: CreatePublicEvent :one
INSERT INTO PublicEvent (id)
VALUES ($1)
RETURNING id, approved
`

func (q *Queries) CreatePublicEvent(ctx context.Context, id int32) (Publicevent, error) {
	row := q.db.QueryRow(ctx, createPublicEvent, id)
	var i Publicevent
	err := row.Scan(&i.ID, &i.Approved)
	return i, err
}

const createRso = `-- name: CreateRso :one
INSERT INTO Rso (title, university)
VALUES ($1, $2)
RETURNING id, title, university
`

type CreateRsoParams struct {
	Title      string `json:",required"`
	University int32  `json:",required"`
}

func (q *Queries) CreateRso(ctx context.Context, arg CreateRsoParams) (Rso, error) {
	row := q.db.QueryRow(ctx, createRso, arg.Title, arg.University)
	var i Rso
	err := row.Scan(&i.ID, &i.Title, &i.University)
	return i, err
}

const createRsoEvent = `-- name: CreateRsoEvent :one
INSERT INTO RsoEvent (id, rso)
VALUES ($1, $2)
RETURNING id, rso
`

type CreateRsoEventParams struct {
	ID  int32 `json:",required"`
	Rso int32 `json:",required"`
}

func (q *Queries) CreateRsoEvent(ctx context.Context, arg CreateRsoEventParams) (Rsoevent, error) {
	row := q.db.QueryRow(ctx, createRsoEvent, arg.ID, arg.Rso)
	var i Rsoevent
	err := row.Scan(&i.ID, &i.Rso)
	return i, err
}

const createRsoMember = `-- name: CreateRsoMember :one
INSERT INTO RsoMember (rso)
VALUES ($1)
RETURNING id, rso, is_admin
`

func (q *Queries) CreateRsoMember(ctx context.Context, rso int32) (Rsomember, error) {
	row := q.db.QueryRow(ctx, createRsoMember, rso)
	var i Rsomember
	err := row.Scan(&i.ID, &i.Rso, &i.IsAdmin)
	return i, err
}

const createSuperAdmin = `-- name: CreateSuperAdmin :one
INSERT INTO SuperAdmin (id)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateSuperAdmin(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, createSuperAdmin, id)
	err := row.Scan(&id)
	return id, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO Tag (title)
VALUES ($1)
RETURNING id, title
`

func (q *Queries) CreateTag(ctx context.Context, title string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, title)
	var i Tag
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const createTaggedEvent = `-- name: CreateTaggedEvent :one
INSERT INTO TaggedEvent (tag, base_event)
VALUES ($1, $2)
RETURNING tag, base_event
`

type CreateTaggedEventParams struct {
	Tag       int32 `json:",required"`
	BaseEvent int32 `json:",required"`
}

func (q *Queries) CreateTaggedEvent(ctx context.Context, arg CreateTaggedEventParams) (Taggedevent, error) {
	row := q.db.QueryRow(ctx, createTaggedEvent, arg.Tag, arg.BaseEvent)
	var i Taggedevent
	err := row.Scan(&i.Tag, &i.BaseEvent)
	return i, err
}

const createTaggedRso = `-- name: CreateTaggedRso :one
INSERT INTO TaggedRso (tag, rso)
VALUES ($1, $2)
RETURNING tag, rso
`

type CreateTaggedRsoParams struct {
	Tag int32 `json:",required"`
	Rso int32 `json:",required"`
}

func (q *Queries) CreateTaggedRso(ctx context.Context, arg CreateTaggedRsoParams) (Taggedrso, error) {
	row := q.db.QueryRow(ctx, createTaggedRso, arg.Tag, arg.Rso)
	var i Taggedrso
	err := row.Scan(&i.Tag, &i.Rso)
	return i, err
}

const createUniversity = `-- name: CreateUniversity :one
WITH new_coord AS (
    INSERT INTO Coordinate (title, latitude, longitude)
    VALUES ($3, $4, $5)
    RETURNING id, title, latitude, longitude
)
INSERT INTO University (title, coordinate, about)
VALUES (
        $1,
        (
            SELECT id
            FROM new_coord
        ),
        $2
    )
RETURNING id, title, coordinate, about
`

type CreateUniversityParams struct {
	UniversityTitle string  `json:",required"`
	UniversityAbout string  `json:",required"`
	CoordTitle      string  `json:",required"`
	CoordLatitude   float64 `json:",required"`
	CoordLongitude  float64 `json:",required"`
}

func (q *Queries) CreateUniversity(ctx context.Context, arg CreateUniversityParams) (University, error) {
	row := q.db.QueryRow(ctx, createUniversity,
		arg.UniversityTitle,
		arg.UniversityAbout,
		arg.CoordTitle,
		arg.CoordLatitude,
		arg.CoordLongitude,
	)
	var i University
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Coordinate,
		&i.About,
	)
	return i, err
}
