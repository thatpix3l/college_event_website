package app

import "github.com/thatpix3l/cew/src/utils"
import "strings"
import "github.com/thatpix3l/cew/src/gen_sql"
import "fmt"
import "strconv"

import m "github.com/thatpix3l/cew/src/gen_sql/college_event_website/cew/model"

type status struct {
	value string
}

var Success = status{"success"}
var Warning = status{"warning"}
var Failure = status{"failure"}

func api(format string, a ...any) string {
	return utils.ApiPath(fmt.Sprintf(format, a...))
}

templ Nothing() {
}

templ Home(comp templ.Component) {
	<!DOCTYPE html>
	<html>
		<head>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<link
				rel="stylesheet"
				href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"
			/>
			<style>
			@import url('https://fonts.cdnfonts.com/css/open-sans');

			a:hover {
				cursor: pointer;
			}
			
			.comment textarea {
				rows: 5;
			}
	
			</style>
		</head>
		<body>
			<div class="container">
				<main>
					@comp
				</main>
			</div>
		</body>
	</html>
}

templ EventSearch() {
	<form
		hx-get={ api("event") }
		hx-target="#interactive"
		hx-trigger="input from:#event-search"
	>
		<input id="event-search" type="text" name="search" placeholder="Search Event" aria-label="Search Event"/>
	</form>
}

templ Event(event gen_sql.Event) {
	<article id={ "event-" + event.Baseevent.ID }>
		<header>
			<b>
				<a hx-get={ api("event/%s", event.Baseevent.ID) } hx-target="#interactive">
					@templ.Raw(event.Baseevent.Title)
				</a>
			</b>
		</header>
		@templ.Raw(event.Baseevent.About)
		if len(event.Tags) > 0 {
			<footer>
				for i, tag := range event.Tags {
					if i > 0 {
						{ ", " }
					}
					<a>{ tag.Title }</a>
				}
			</footer>
		}
	</article>
}

templ EventList(events []gen_sql.Event) {
	for _, event := range events {
		@Event(event)
	}
}

templ EventListHome(events []gen_sql.Event) {
	@NavBar("events")
	@EventSearch()
	<div id="interactive">
		@EventList(events)
	</div>
}

templ CommentContainer(commentId string, header templ.Component, body templ.Component, footer templ.Component) {
	<article id={ "comment-" + commentId } class="comment">
		<header>
			@header
		</header>
		<div>
			@body
		</div>
		<footer>
			@footer
		</footer>
	</article>
}

templ CommentPostDate(comment m.Comment) {
	<small>{ comment.PostTimestamp.Format("January 02, 2006") }</small>
}

templ CommentUserGenerated(comment m.Comment) {
	{ comment.Body }
}

templ CommentActions(comment m.Comment, user gen_sql.User) {
	if user.Student != nil && comment.StudentID != nil && user.Student.ID == *comment.StudentID {
		<button
			hx-get={ api("comment/%s/update", comment.ID) }
			hx-target={ "#comment-" + comment.ID }
			hx-swap="outerHTML"
		>Edit</button>
		<button hx-delete={ api("comment/%s", comment.ID) } hx-target="#interactive">Delete</button>
	}
}

templ Comment(user gen_sql.User, comment m.Comment) {
	@CommentContainer(comment.ID, CommentPostDate(comment), CommentUserGenerated(comment), CommentActions(comment, user))
}

templ CommentCreator(event gen_sql.Event) {
	<form
		hx-post={ api("event/%s/comment", event.Baseevent.ID) }
		hx-target="#interactive"
	>
		<textarea
			name="CommentBody"
			placeholder="New Comment"
		></textarea>
		<input type="submit" value="Submit"/>
	</form>
}

templ CommentUpdaterBody(commentId string) {
	<form
		hx-patch={ api("comment/%s", commentId) }
		hx-target={ "#comment-" + commentId }
		hx-swap="outerHTML"
		hx-trigger={ "click from:#update-comment-submit" + commentId }
	>
		<textarea name="CommentBody" placeholder="Updated Comment"></textarea>
	</form>
}

templ CommentUpdaterCancel(commentId string) {
	<button
		hx-get={ api("comment/%s", commentId) }
		hx-target={ "#comment-" + commentId }
		hx-swap="outerHTML"
	>
		Cancel
	</button>
}

templ CommentUpdaterSubmit(commentId string) {
	<button id={ "update-comment-submit" + commentId }>
		Submit
	</button>
}

templ CommentUpdaterActions(commentId string) {
	@NavToolbar(Toolbar(CommentUpdaterCancel(commentId), CommentUpdaterSubmit(commentId)))
}

templ CommentUpdater(commentId string) {
	@CommentContainer(commentId, Nothing(), CommentUpdaterBody(commentId), CommentUpdaterActions(commentId))
}

templ CommentList(user gen_sql.User, comments []m.Comment) {
	if len(comments) > 0 {
		for _, comment := range comments {
			@Comment(user, comment)
		}
	}
}

templ EventInfo(event gen_sql.Event) {
}

templ UniversityInput(universities []m.University) {
	<select id="university-input" name="UniversityID" aria-label="Pick University" required>
		<option selected disabled value="">Pick University</option>
		for _, university := range universities {
			<option value={ university.ID }>{ university.Title }</option>
		}
	</select>
}

templ CreatedUniversities(universities []m.University) {
	for _, university := range universities {
		<article>
			<header>{ university.Title }</header>
			{ university.About }
			<br/>
			{ university.ID }
		</article>
	}
}

templ CreatedBaseUsers(users []gen_sql.User) {
	for _, user := range users {
		<article>
			<header>{ user.Baseuser.NameLast + ", " + user.Baseuser.NameFirst }</header>
			{ user.Baseuser.ID }
		</article>
	}
}

templ StatusMessage(alert status, desc string) {
	<div class={ "alert", "alert-" + alert.value } role="alert">{ desc }</div>
}

templ FormInput(inputType string, id string, title string) {
	<label for={ id }><b>{ title }</b></label>
	<input type={ inputType } id={ id } name={ id } placeholder={ "Enter " + strings.ToLower(title) }/>
}

templ Toolbar(comps ...templ.Component) {
	if len(comps) > 0 {
		<ul>
			for _, comp := range comps {
				<li>
					@comp
				</li>
			}
		</ul>
	}
}

templ NavToolbar(toolbars ...templ.Component) {
	<nav>
		for _, toolbar := range toolbars {
			@toolbar
		}
	</nav>
}

templ CredentialsForm(title string, postPath string, altPath string, altAbout string, extraForms ...templ.Component) {
	<article>
		<header>
			<h1>{ title }</h1>
			<a hx-target="main" hx-get={ api(altPath) }>{ altAbout }</a>
		</header>
		<form hx-target="main" hx-post={ api(postPath) } method="post">
			@FormInput("email", "Email", "Email")
			@FormInput("password", "PasswordPlaintext", "Password")
			for _, ef := range extraForms {
				@ef
			}
			<input type="submit" value="Submit"/>
		</form>
	</article>
}

templ LoginForm() {
	@CredentialsForm("Login", "login", "signup", "Need to create an account?")
}

templ SignupForm(universities []m.University) {
	@CredentialsForm("Signup", "signup", "login", "Already have an account?",
		FormInput("text", "NameFirst", "First Name"),
		FormInput("text", "NameLast", "Last Name"),
		UniversityInput(universities))
}

var navBarItems = []string{"events", "rsos", "account"}

templ NavBar(currentTitle string) {
	<nav id="navbar">
		<ul>
			<li>
				<strong>
					<a hx-get={ api("home/%s", currentTitle) } hx-target="main">
						{ utils.ToUpperFirst(currentTitle) }
					</a>
				</strong>
			</li>
		</ul>
		<ul>
			for _, navBarItem := range navBarItems {
				if navBarItem != currentTitle {
					<li>
						<a
							hx-get={ api("home/%s", navBarItem) }
							hx-target="main"
						>
							{ utils.ToUpperFirst(navBarItem) }
						</a>
					</li>
				}
			}
		</ul>
	</nav>
}

templ RsoMemberCount(rso gen_sql.Rso) {
	if len(rso.Members) == 1 {
		member
	} else {
		members
	}
}

templ Rso(rso gen_sql.Rso) {
	<article id={ "rso-" + rso.Rso.ID }>
		<header>
			<b><a hx-get={ api("rso/" + rso.Rso.ID) } hx-target="#interactive">{ rso.Rso.Title }</a></b>
			if len(rso.Members) > 0 {
				, { strconv.Itoa(len(rso.Members)) + " " } @RsoMemberCount(rso)
			}
		</header>
		{ rso.Rso.About }
		<footer></footer>
	</article>
}

templ UserInfo(user gen_sql.User) {
	<article>
		<header>{ user.NameFirst } { user.NameLast }</header>
		<div>
			if user.UniversityID != nil {
				University: { *user.UniversityID }
			}
		</div>
		<footer></footer>
	</article>
}

templ RsoJoin(rso gen_sql.Rso) {
	<button hx-post={ api("rso/%s/member", rso.Rso.ID) } hx-target="#interactive">Join</button>
}

templ RsoLeave(rso gen_sql.Rso, user gen_sql.User) {
	<button hx-delete={ api("rso/%s/member/%s", rso.Rso.ID, user.Baseuser.ID) } hx-target="#interactive">Leave</button>
}

templ RsoJoinLeave(rso gen_sql.Rso, user gen_sql.User) {
	if user.Rsomember != nil && user.Rsomember.RsoID == rso.Rso.ID {
		@RsoLeave(rso, user)
	} else {
		@RsoJoin(rso)
	}
}

templ RsoInfo(rso gen_sql.Rso, user gen_sql.User) {
	@NavToolbar(Toolbar(RsoJoinLeave(rso, user)))
	@Rso(rso)
	<div id="list-rso-member">
		for _, user := range rso.Members {
			@UserInfo(user)
		}
	</div>
}

templ RsoList(rsos []gen_sql.Rso) {
	if len(rsos) > 0 {
		<div id="list-rso">
			for _, rso := range rsos {
				@Rso(rso)
			}
		</div>
	}
}

templ CreateRso(universities []m.University) {
	<article>
		<form hx-post={ api("rso") } hx-target="main">
			<input type="text" name="Title" placeholder="Title"/>
			<input type="text" name="About" placeholder="Short Description"/>
			@UniversityInput(universities)
			<input type="submit"/>
		</form>
	</article>
}

templ CreateRsoButton() {
	<button
		hx-get={ api("rso/create") }
		hx-target="#interactive"
	>Create</button>
}

templ RsoToolbar() {
	@Toolbar(CreateRsoButton())
}

templ RsoListHome(rsos []gen_sql.Rso) {
	@NavBar("rsos")
	<div id="interactive">
		@NavToolbar(RsoToolbar())
		@RsoList(rsos)
	</div>
}

templ StackComponents(components ...templ.Component) {
	for _, component := range components {
		@component
	}
}
