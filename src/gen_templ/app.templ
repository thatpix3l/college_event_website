package app

import "github.com/thatpix3l/cew/src/utils"
import "strings"
import "github.com/thatpix3l/cew/src/gen_sql"

import m "github.com/thatpix3l/cew/src/gen_sql/college_event_website/cew/model"

type status struct {
	value string
}

var Success = status{"success"}
var Warning = status{"warning"}
var Failure = status{"failure"}

templ Home(comp templ.Component) {
	<!DOCTYPE html>
	<html>
		<header>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<link
				rel="stylesheet"
				href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"
			/>
			<style>
	@import url('https://fonts.cdnfonts.com/css/open-sans');

	:root {
		$amber-50: #fff8e1 !default;
		$amber-900: #ff6f00 !default;
		$green-50: #e8f5e9 !default;
		$green-800: #1b5e20 !default;
		$red-50: #ffebee !default;
		$red-900: #b71c1c !default;
	}
	
	a:hover {
		cursor: pointer;
	}
	
}

	</style>
		</header>
		<body>
			<div class="container">
				<main>
					@comp
				</main>
			</div>
		</body>
	</html>
}

func submitEventInfo() string {
	return "document.querySelector(\"#event-info\")"
}

templ Event(event gen_sql.Event) {
	<article id={ "event-" + event.Baseevent.ID }>
		<header>
			<form
				id="event-info"
				hx-get={ utils.ApiPath("event/info") }
				hx-target="#interactive"
				hx-trigger={ "click from:#event-" + event.Baseevent.ID + "  a" }
			>
				<input type="hidden" name="EventId" value={ event.Baseevent.ID }/>
				<a>{ event.Baseevent.Title }</a>
			</form>
		</header>
		@templ.Raw(event.Baseevent.About)
		if len(event.Tags) > 0 {
			<footer>
				for i, tag := range event.Tags {
					if i > 0 {
						{ ", " }
					}
					<a>{ tag.Title }</a>
				}
			</footer>
		}
	</article>
}

templ EventList(events []gen_sql.Event) {
	for _, event := range events {
		@Event(event)
	}
}

templ Comment(user gen_sql.User, comment m.Comment) {
	<article id={ "comment-" + comment.ID }>
		{ comment.Body }
		<footer>
			if user.Student != nil && comment.StudentID != nil && user.Student.ID == *comment.StudentID {
				<button>Edit</button>
				<button>Delete</button>
			}
		</footer>
	</article>
}

templ CommentList(user gen_sql.User, comments []m.Comment) {
	for _, comment := range comments {
		@Comment(user, comment)
	}
}

templ Interactive(comp templ.Component) {
	<div id="interactive">
		@comp
	</div>
}

templ EventInfo(event gen_sql.Event) {
}

templ UniversityInput(universities []m.University) {
	<label for="university-input"><b></b></label>
	<select id="university-input" name="UniversityID" aria-label="Pick University" required>
		<option selected disabled value="">Pick University</option>
		for _, university := range universities {
			<option value={ university.ID }>{ university.Title }</option>
		}
	</select>
}

templ CreatedUniversities(universities []m.University) {
	for _, university := range universities {
		<article>
			<header>{ university.Title }</header>
			{ university.About }
			<br/>
			{ university.ID }
		</article>
	}
}

templ CreatedBaseUsers(users []gen_sql.User) {
	for _, user := range users {
		<article>
			<header>{ user.Baseuser.NameLast + ", " + user.Baseuser.NameFirst }</header>
			{ user.Baseuser.ID }
		</article>
	}
}

templ StatusMessage(alert status, desc string) {
	<div class={ "alert", "alert-" + alert.value } role="alert">{ desc }</div>
}

templ FormInput(inputType string, id string, title string) {
	<label for={ id }><b>{ title }</b></label>
	<input type={ inputType } id={ id } name={ id } placeholder={ "Enter " + strings.ToLower(title) }/>
}

type CredFormProps struct {
	Title            string            // Title of credentials form
	PostPath         string            // API path to post form data
	AlternativePath  string            // Path to alternative form
	AlternativeAbout string            // Short "about" for alternative form
	ExtraForms       []templ.Component // List of extra forms
}

templ CredentialsForm(title string, postPath string, altPath string, altAbout string, extraForms ...templ.Component) {
	<article>
		<header>
			<h1>{ title }</h1>
			<a hx-target="main" hx-get={ utils.ApiPath(altPath) }>{ altAbout }</a>
		</header>
		<form hx-target="main" hx-post={ utils.ApiPath(postPath) } method="post">
			@FormInput("email", "Email", "Email")
			@FormInput("password", "PasswordPlaintext", "Password")
			for _, ef := range extraForms {
				@ef
			}
			<input type="submit" value="Submit"/>
		</form>
	</article>
}

templ LoginForm() {
	@CredentialsForm("Login", "login", "signup", "Need to create an account?")
}

templ SignupForm(universities []m.University) {
	@CredentialsForm("Signup", "signup", "login", "Already have an account?",
		FormInput("text", "NameFirst", "First Name"),
		FormInput("text", "NameLast", "Last Name"),
		UniversityInput(universities))
}

var navBarItems = []string{"events", "rsos", "account"}

templ NavBar(currentTitle string) {
	<nav id="navbar">
		<ul>
			<li>
				<strong>
					{ utils.ToUpperFirst(currentTitle) }
				</strong>
			</li>
		</ul>
		<ul>
			for _, navBarItem := range navBarItems {
				if navBarItem != currentTitle {
					<li>
						<a
							hx-get={ utils.ApiPath(navBarItem) }
							hx-target="main"
						>
							{ utils.ToUpperFirst(navBarItem) }
						</a>
					</li>
				}
			}
		</ul>
	</nav>
}

templ EventListToolbar() {
	<nav>
		<ul>
			<li><button hx-target={ utils.ApiPath("event/create") } hx-target="#interactive">Create Event</button></li>
			<li><button hx-target={ utils.ApiPath("event/remove") } hx-target="#interactive">Remove Event</button></li>
		</ul>
	</nav>
}

templ CreatedRsos(rsos []m.Rso) {
	for _, rso := range rsos {
		<article>
			<header>{ rso.Title }</header>
			{ rso.About }
			<footer>
				<form hx-get={ utils.ApiPath("rso/member") } hx-target="#authenticated">
					<input type="hidden" name="ID" value={ rso.ID }/>
					<button type="submit">Events</button>
				</form>
			</footer>
		</article>
	}
}

templ StackComponents(components ...templ.Component) {
	for _, component := range components {
		@component
	}
}
